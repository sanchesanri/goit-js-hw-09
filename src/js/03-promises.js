import { Notify } from 'notiflix';

const formRef = document.querySelector('.form');

formRef.addEventListener('submit', onFormSubmitClick);

//–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∞–±–º—ñ—Ç—É —Ñ–æ—Ä–º–∏ –≤–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é createPromise(position, delay) —Å—Ç—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤, —Å–∫—ñ–ª—å–∫–∏ –≤–≤–µ–ª–∏ –≤ –ø–æ–ª–µ amount. –ü—ñ–¥ —á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –ø–µ—Ä–µ–¥–∞–π —ó–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º—ñ—Å—É (position), —â–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è, —ñ –∑–∞—Ç—Ä–∏–º–∫—É, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –ø–µ—Ä—à—É –∑–∞—Ç—Ä–∏–º–∫—É (delay), –≤–≤–µ–¥–µ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, —ñ –∫—Ä–æ–∫ (step).

function createPromise(position, delay) {
  return new Promise((res, rej) => {
    const shouldResolve = Math.random() > 0.3;

    // setTimeout(() => {
    //   if (shouldResolve) {
    //     res(Notify.success(`‚úÖ Fulfilled promise ${position} in ${delay}ms`));
    //   } else {
    //     rej(Notify.failure(`‚ùå Rejected promise ${position} in ${delay}ms`));
    //   }
    // }, delay);

    setTimeout(() => {
      if (shouldResolve) {
        res({ position, delay });
      } else {
        rej({ position, delay });
      }
    }, delay);
  });
}

//–î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó createPromise —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –æ–¥–∏–Ω –ø—Ä–æ–º—ñ—Å, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ delay —á–∞—Å—É. –ó–Ω–∞—á–µ–Ω–Ω—è–º –ø—Ä–æ–º—ñ—Å—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–±'—î–∫—Ç, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ position —ñ delay –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≥–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –∑ –ø—Ä–æ–º—ñ—Å–æ–º - –≤–∏–∫–æ–Ω–∞—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏.

function onFormSubmitClick(evt) {
  evt.preventDefault();

  const { elements } = evt.target;

  const delayValue = Number(elements.delay.value);
  const stepValue = Number(elements.step.value);
  const amountValue = Number(elements.amount.value);

  // for (let index = 0; index < amountValue; index += 1) {
  //   createPromise(index + 1, delayValue + stepValue * index)
  //     .then(response => {
  //       response;
  //     })
  //     .catch(error => error);
  // }

  if(delayValue<0 || stepValue<0 || amountValue <0 ){
    Notify.init({
      width: '280px',
      position:'center-center',
      timeout: 5000,
    });
    Notify.info('Nice try, nice try...üòÄ');
    return
  }

  Notify.init({
    width: '280px',
    position:'right-top',
    timeout: 3000,
  });

  for (let index = 0; index < amountValue; index += 1) {
    createPromise(index + 1, delayValue + stepValue * index)
      .then(({ position, delay }) => {
        Notify.success(`‚úÖ Fulfilled promise ${position} in ${delay}ms`);
      })
      .catch(({ position, delay }) => {
        Notify.failure(`‚ùå Rejected promise ${position} in ${delay}ms`);
      });
  }
}
